# Assignment 6: Third Time’s a Charm – Three Trios, Part 2 - To-Do List
----------------------------------------------------------------------------------------------------
Communcations:
Z:
- make it such that you can pass in an odd number of cards and it wont crash!!
- how do i make it so that the curr player cant play the other players cards?
- throw exception if both of the players are the same color --> 2 blue players.
- implement the interfaces in the gui components
- Additionally, your view should (temporarily) print a message (using System.out) containing the
index of the card that was clicked on as well as which player owns that hand.
  - a user should be able to click on a cell in the grid and the view should (temporarily) print a
  message (using System.out) containing the coordinates of the cell that was clicked on, in whatever
  coordinate system you used in your model. Note: this is not the same thing as the physical mouse
  coordinates of the mouse event!

  O Player information (current score, cards in hand).
             O Control buttons (e.g., "Restart Game," "Exit Game").

M:

To Discuss:
- make a plan for the controller
Does our font need to change size?
Why does our thing require 2x the amount of cards actually needed?

----------------------------------------------------------------------------------------------------
                              ---------------
                              --To Do List:--
                              ---------------

    KEY
O - not complete
X - completed
* - in progress if needed

### 1. Refactor Models into Read-Only and Mutable Interfaces --Meroska by nov 5th
   X **Identify key methods in `GameModelImpl`** that are used for game data retrieval vs. game state changes.
   X **Define Read-Only Interface**
       X List methods related to retrieving game state without modifying it (e.g., methods to view grid status, cards, player info).
       X Implement a read-only interface that includes these non-modifying methods.
   X Identify methods that alter the game state (e.g., methods to place cards, change turns, update scores).
       X Add an update score method to the mutable interface. --- did we want a getScore or a variable that stores an updated score?
       X Implement a mutable interface with these methods.
   X **Implement Interfaces in Model**
       X Update `GameModelImpl` to implement both interfaces.
       O Ensure methods are appropriately grouped and restricted according to each interface.

---

### 2. Develop a Visual View of the Game Using Java Swing
   X **Plan Visual Components**
       X Design how the grid, players, and cards will be displayed in the GUI.
       X Decide on layout, components (e.g., JPanels, JLabels, buttons), and color schemes.
   X **Implement Swing View Class**
       X Set up main game window using JFrame.
       X Add panels or components for:
           X Game grid (display cells and card placement).
           O Player information (current score, cards in hand).
           O Control buttons (e.g., "Restart Game," "Exit Game").
       X Style the game layout for clarity and visual appeal.

---

### 3. Integrate Mouse Interaction for Card Placement
   O **Handle Mouse Events**
       X Add mouse listeners to grid cells to detect clicks.
       O Implement logic for determining which cell was clicked.
       O Trigger card placement logic based on cell selection.
   O **Update Game State in View**
       O Reflect changes in the model visually (e.g., showing a placed card on the grid).
       O Ensure turn-based actions update correctly in the view.

---

### 4. Implement Strategic Computer Players
   O **Define Strategy Interfaces** -- Meroska by nov 6th
       O Create interfaces or abstract classes for computer player strategies.
   O **Implement Specific Strategies** ---Meroska by nov 6th
       O Develop basic strategy (random or simple heuristics).
       O Implement advanced strategy (e.g., decision-making based on game state).
   O **Integrate Strategies with Game Logic**--Meroska by nov 7th
       O Add functionality to select a strategy for the computer player.
       O Test strategies to confirm they respond correctly to game events.
  O **Extra credit chain of strategies** --Meroska by nov 8th

---

### 5. Testing
   O **Unit Test Model and View Components**
       O Write unit tests for read-only and mutable model interfaces.
       O Use mock objects to simulate strategies and game states.
   O **Test GUI Interactions**
       O Test mouse interactions for card placement.
       O Ensure visual updates match game state changes.
   O **Test Computer Player Strategies**
       O Verify each strategy performs as expected.
       O Check interactions between player actions and computer responses.

---

### 6. Documentation & Submission
   O **Update README**
       O Provide instructions on game setup, controls, and rules.
       O List known issues and areas for potential enhancement.
   O **Prepare Submission Files**
       O Include all code files, README, and screenshots.
       O Generate JAR file for easy execution.
   O **Submit** by Nov 12.
   O **Complete Self-Evaluation** by Nov 14.



--- INCLASS NOTES ABOUT HW 6

   - DONT PUT SPACES BETWEEN CARDS/CELLS IN THE GRID- points will be lost its ok
   if there is a hand panel with the cards in hand
   and the grid/baord, but no spaces between cards/cells