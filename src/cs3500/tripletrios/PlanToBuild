for numbers of card snad grid
if grid has 35 cells then there should be (35+1)/2 = 18 cards in each players hands

----------------------------------------------------------------------------------------------------
Communcations:
Z:
- make it such that you can pass in an odd number of cards and it wont crash!!
- how do i make it so that the curr player cant play the other players cards?
- throw exception if both of the players are the same color --> 2 blue players.
- implement the interfaces in the gui components
- Additionally, your view should (temporarily) print a message (using System.out) containing the
index of the card that was clicked on as well as which player owns that hand.
  - a user should be able to click on a cell in the grid and the view should (temporarily) print a
  message (using System.out) containing the coordinates of the cell that was clicked on, in whatever
  coordinate system you used in your model. Note: this is not the same thing as the physical mouse
  coordinates of the mouse event!

  O Player information (current score, cards in hand).
             O Control buttons (e.g., "Restart Game," "Exit Game").

M:

To Discuss:
- make a plan for the controller

----------------------------------------------------------------------------------------------------
                              ---------------
                              --To Do List:--
                              ---------------
KEY:
"-" means to-do
"+" means completed
"*" means in progress

                                SOURCE CODE
Model:
+ make the model read only
    + extend the interface to a read only three trios model intergace
        - The ability to create a game using the configuration files for the grid and the cards
        - The ability to create a copy of the grid
            - obserations:
              How big is the grid?
              What are the contents of a cell at a given coordinate?
              What are the contents of a player’s hand?
              Which player owns the card in a cell at a given coordinate?
              Is it legal for the current player to play at a given coordinate?
              Given a card and a coordinate, how many cards can a player flip by playing at a
              given coordinate?
              What is a player’s score in the game?
              Is the game over?
        - The current player plays a card from their hand at a given cell

Basic View:
    + create a GUI view using java swing
    _ interfaces for all the components of the view
        + frame
        + panel
        + gui rendering??

How we want the view to look
+ a game board in the center (rows x cols big) -- light purple
+ a column on each side of the grid defining the player's hand
+ yellow or dark purple squares indicating the possible moves for the players
- once a card is placed the yellow square turns into the card.

+ a user should be able to click on a card in the hand,
and it should highlight that card somehow. In the image below,
the highlight is indicated as a thick grey border. You may choose another way of
highlighting if you wish so long as it is obvious it is selected.
- Additionally, your view should (temporarily) print a message (using System.out) containing the
index of the card that was clicked on as well as which player owns that hand.

  a user should be able to click on a cell in the grid and the view should (temporarily) print a
  message (using System.out) containing the coordinates of the cell that was clicked on, in whatever
  coordinate system you used in your model. Note: this is not the same thing as the physical mouse
  coordinates of the mouse event!

+ a user can select
+ a user can deselect a card by clicking the same card or another card

+ clicking outside of the grid shouldn't do anything


Computer Player:
- Flip as many cards on this turn as possible. This means choosing a position and card together.

- Go for the corners: cards in corners only expose two of their attack values instead of all 4,
making them harder to flip. Then consider which card is hardest to flip in that corner.

- If there are multiple "best" moves that can be chosen in a single strategy,
break ties by choosing the move with the uppermost-leftmost coordinate for the position and then
choose the best card for that position with an index closest to 0 in the hand .
- If there are no valid moves, your player should pass choose the upper-most,
left-most open position and the card at index 0.

Controller:
- make a plan for the controller

Main:
+ fix the code with our actual model class names

Make a mock model:
- Mock your model to record a transcript of which coordinates were inspected by your strategy, and
then test whether that transcript contains all the necessary coordinates.
- Mock your model to lie about the legality of certain locations or the value of such moves,
to force your strategy to think that only only a pre-determined move is valid, and then test that
it indeed returns that move.
Submit a plain-text file named strategy-transcript.txt containing a transcript from your mocked
model of your simplest strategy choosing a move for Black on the starting board configuration.



EXTRA CREDIT:
Implement the other two strategies mentioned in the prior subsection.
Fix your strategy implementations such that they can be recombined in
various ways (and not just hard-coded in a fixed combination like our
HybridMergeSorter from class.
Write tests that show your new strategies work solo and you can
recombine strategies to make more complex ones.
WRITE THIS IN THE README

                                  TESTING
- have the screenshots for the appropriate parts of the view:
    - At the start of the game
    - With a card selected from the Red Player’s hand
    - With a card selected from the Blue Player’s hand
    - At a non-trivial intermediate point of the game, meaning cards have been played and the hands of both players have decreased
- test the strategies


                                    OTHER
